// skel.scss v3.0.1 | (c) skel.io | MIT licensed */

// Vars.

/// Breakpoints.
/// @var {list}
$breakpoints: () !global;

/// Vendor prefixes.
/// @var {list}
$vendor-prefixes: (
        '-moz-',
        '-webkit-',
        '-ms-',
        ''
);

/// Properties that should be vendorized.
/// @var {list}
$vendor-properties: (
        'align-content',
        'align-items',
        'align-self',
        'animation',
        'animation-delay',
        'animation-direction',
        'animation-duration',
        'animation-fill-mode',
        'animation-iteration-count',
        'animation-name',
        'animation-play-state',
        'animation-timing-function',
        'appearance',
        'backface-visibility',
        'box-sizing',
        'filter',
        'flex',
        'flex-basis',
        'flex-direction',
        'flex-flow',
        'flex-grow',
        'flex-shrink',
        'flex-wrap',
        'justify-content',
        'order',
        'perspective',
        'pointer-events',
        'transform',
        'transform-origin',
        'transform-style',
        'transition',
        'transition-delay',
        'transition-duration',
        'transition-property',
        'transition-timing-function',
        'user-select'
);

/// Values that should be vendorized.
/// @var {list}
$vendor-values: (
        'filter',
        'flex',
        'linear-gradient',
        'radial-gradient',
        'transform'
);

// Functions.

/// Removes a specific item from a list.
/// @author Hugo Giraudel
/// @param {list} $list List.
/// @param {integer} $index Index.
/// @return {list} Updated list.
@function remove-nth($list, $index) {

  $result: null;

  @if type-of($index) != number {
    @warn "$index: #{quote($index)} is not a number for `remove-nth`.";
  } @else if $index == 0 {
    @warn "List index 0 must be a non-zero integer for `remove-nth`.";
  } @else if abs($index) > length($list) {
    @warn "List index is #{$index} but list is only #{length($list)} item long for `remove-nth`.";
  } @else {

    $result: ();
    $index: if($index < 0, length($list) + $index + 1, $index);

    @for $i from 1 through length($list) {

      @if $i != $index {
        $result: append($result, nth($list, $i));
      }

    }

  }

  @return $result;

}

/// Replaces a substring within another string.
/// @author Hugo Giraudel
/// @param {string} $string String.
/// @param {string} $search Substring.
/// @param {string} $replace Replacement.
/// @return {string} Updated string.
@function str-replace($string, $search, $replace: '') {

  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;

}

/// Replaces a substring within each string in a list.
/// @param {list} $strings List of strings.
/// @param {string} $search Substring.
/// @param {string} $replace Replacement.
/// @return {list} Updated list of strings.
@function str-replace-all($strings, $search, $replace: '') {

  @each $string in $strings {
    $strings: set-nth($strings, index($strings, $string), str-replace($string, $search, $replace));
  }

  @return $strings;

}

/// Gets a value from a map.
/// @author Hugo Giraudel
/// @param {map} $map Map.
/// @param {string} $keys Key(s).
/// @return {string} Value.
@function val($map, $keys...) {

  @if nth($keys, 1) == null {
    $keys: remove-nth($keys, 1);
  }

  @each $key in $keys {
    $map: map-get($map, $key);
  }

  @return $map;

}

// Mixins.

/// Sets the global box model.
/// @param {string} $model Model (default is content).
@mixin boxModel($model: 'content') {

  $x: $model + '-box';

  *, *:before, *:after {
    -moz-box-sizing: #{$x};
    -webkit-box-sizing: #{$x};
    box-sizing: #{$x};
  }

}

/// Wraps @content in a @media block using a given breakpoint.
/// @param {string} $breakpoint Breakpoint.
/// @param {map} $queries Additional queries.
@mixin breakpoint($breakpoint: null, $queries: null) {

  $query: 'screen';

  // Breakpoint.
  @if $breakpoint and map-has-key($breakpoints, $breakpoint) {
    $query: $query + ' and ' + map-get($breakpoints, $breakpoint);
  }

  // Queries.
  @if $queries {
    @each $k, $v in $queries {
      $query: $query + ' and (' + $k + ':' + $v + ')';
    }
  }

  @media #{$query} {
    @content;
  }

}

/// Wraps @content in a @media block targeting a specific orientation.
/// @param {string} $orientation Orientation.
@mixin orientation($orientation) {
  @media screen and (orientation: #{$orientation}) {
    @content;
  }
}

/// Wraps @content in vendorized keyframe blocks.
/// @param {string} $name Name.
@mixin keyframes($name) {

  @-moz-keyframes #{$name} {
    @content;
  }
  @-webkit-keyframes #{$name} {
    @content;
  }
  @-ms-keyframes #{$name} {
    @content;
  }
  @keyframes #{$name} {
    @content;
  }

}

///
/// Sets breakpoints.
/// @param {map} $x Breakpoints.
///
@mixin skel-breakpoints($x: ()) {
  $breakpoints: $x !global;
}

///
/// Initializes layout module.
/// @param {map} config Config.
///
@mixin skel-layout($config: ()) {

  // Config.
  $configPerBreakpoint: ();

  $z: map-get($config, 'breakpoints');

  @if $z {
    $configPerBreakpoint: $z;
  }

  // Reset.
  $x: map-get($config, 'reset');

  @if $x {

    /* Reset */

    @include reset($x);

  }

  // Box model.
  $x: map-get($config, 'boxModel');

  @if $x {

    /* Box Model */

    @include boxModel($x);

  }

}

/// Resets browser styles.
/// @param {string} $mode Mode (default is 'normalize').
@mixin reset($mode: 'normalize') {

  @if $mode == 'normalize' {

    // normalize.css v3.0.2 | MIT License | git.io/normalize
    html {
      font-family: sans-serif;
      -ms-text-size-adjust: 100%;
      -webkit-text-size-adjust: 100%
    }
    body {
      margin: 0
    }
    article, aside, details, figcaption, figure, footer, header, hgroup, main, menu, nav, section, summary {
      display: block
    }
    audio, canvas, progress, video {
      display: inline-block;
      vertical-align: baseline
    }
    audio:not([controls]) {
      display: none;
      height: 0
    }
    [hidden], template {
      display: none
    }
    a {
      background-color: transparent
    }
    a:active, a:hover {
      outline: 0
    }
    abbr[title] {
      border-bottom: 1px dotted
    }
    b, strong {
      font-weight: 700
    }
    dfn {
      font-style: italic
    }
    h1 {
      font-size: 2em;
      margin: .67em 0
    }
    mark {
      background: #ff0;
      color: #000
    }
    small {
      font-size: 80%
    }
    sub, sup {
      font-size: 75%;
      line-height: 0;
      position: relative;
      vertical-align: baseline
    }
    sup {
      top: -.5em
    }
    sub {
      bottom: -.25em
    }
    img {
      border: 0
    }
    svg:not(:root) {
      overflow: hidden
    }
    figure {
      margin: 1em 40px
    }
    hr {
      -moz-box-sizing: content-box;
      box-sizing: content-box;
      height: 0
    }
    pre {
      overflow: auto
    }
    code, kbd, pre, samp {
      font-family: monospace, monospace;
      font-size: 1em
    }
    button, input, optgroup, select, textarea {
      color: inherit;
      font: inherit;
      margin: 0
    }
    button {
      overflow: visible
    }
    button, select {
      text-transform: none
    }
    button, html input[type=button], input[type=reset], input[type=submit] {
      -webkit-appearance: button;
      cursor: pointer
    }
    button[disabled], html input[disabled] {
      cursor: default
    }
    button::-moz-focus-inner, input::-moz-focus-inner {
      border: 0;
      padding: 0
    }
    input {
      line-height: normal
    }
    input[type=checkbox], input[type=radio] {
      box-sizing: border-box;
      padding: 0
    }
    input[type=number]::-webkit-inner-spin-button, input[type=number]::-webkit-outer-spin-button {
      height: auto
    }
    input[type=search] {
      -webkit-appearance: textfield;
      -moz-box-sizing: content-box;
      -webkit-box-sizing: content-box;
      box-sizing: content-box
    }
    input[type=search]::-webkit-search-cancel-button, input[type=search]::-webkit-search-decoration {
      -webkit-appearance: none
    }
    fieldset {
      border: 1px solid silver;
      margin: 0 2px;
      padding: .35em .625em .75em
    }
    legend {
      border: 0;
      padding: 0
    }
    textarea {
      overflow: auto
    }
    optgroup {
      font-weight: 700
    }
    table {
      border-collapse: collapse;
      border-spacing: 0
    }
    td, th {
      padding: 0
    }

  } @else if $mode == 'full' {

    // meyerweb.com/eric/tools/css/reset v2.0 | 20110126 | License: none (public domain)
    html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video {
      margin: 0;
      padding: 0;
      border: 0;
      font-size: 100%;
      font: inherit;
      vertical-align: baseline;
    }
    article, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section {
      display: block;
    }
    body {
      line-height: 1;
    }
    ol, ul {
      list-style: none;
    }
    blockquote, q {
      quotes: none;
    }
    blockquote:before, blockquote:after, q:before, q:after {
      content: '';
      content: none;
    }
    table {
      border-collapse: collapse;
      border-spacing: 0;
    }
    body {
      -webkit-text-size-adjust: none
    }

  }

}

/// Vendorizes a declaration's property and/or value(s).
/// @param {string} $property Property.
/// @param {mixed} $value String/list of value(s).
@mixin vendor($property, $value) {

  // Determine if property should expand.
  $expandProperty: index($vendor-properties, $property);

  // Determine if value should expand (and if so, add '-prefix-' placeholder).
  $expandValue: false;

  @each $x in $value {
    @each $y in $vendor-values {
      @if $y == str-slice($x, 1, str-length($y)) {

        $value: set-nth($value, index($value, $x), '-prefix-' + $x);
        $expandValue: true;

      }
    }
  }

  // Expand property?
  @if $expandProperty {
    @each $vendor in $vendor-prefixes {
      #{$vendor}#{$property}: #{str-replace-all($value, '-prefix-', $vendor)};
    }
  }

    // Expand just the value?
  @else if $expandValue {
    @each $vendor in $vendor-prefixes {
      #{$property}: #{str-replace-all($value, '-prefix-', $vendor)};
    }
  }

    // Neither? Treat them as a normal declaration.
  @else {
    #{$property}: #{$value};
  }

}